{"name":"NotificationEngine","tagline":"It delivers assists in your Information System !","body":"# 1. Understanding the Notification Engine\r\n\r\n## 1.1. Main purpose of the Notification Engine\r\n\r\nThe Notification Engine is designed to be the application that centralizes (e-mail) notifications in your information system.\r\n\r\nToday you probably have many different applications, and each of them probably sends various (e-mail) notifications to users.\r\n\r\nEach application has the responsibility of :\r\n- creating the notifications\r\n- determining who needs to receive each notification\r\n- physically send the notifications\r\n\r\nThe Notification Engine is designed to unify this :\r\n- client applications push notifications to the Notification Engine\r\n- the Notification Engine determines who is concerned by these notifications and then needs to receive them\r\n- The Notification Engine physically builds the messages (e-mails)\r\n- The Notification Engine physically sends the messages (e-mails)\r\n\r\nThe Notification Engine comes with a few built-in components for all these tasks.\r\nActually it is designed to be extended easily, to fit your company's needs.\r\n\r\nTechnically, the Notification Engine is written as a classic JavaEE application.\r\nIt uses well known frameworks and tools such as Spring or Maven to make its adoption easy in any company.\r\nFor its internal persistance, it uses MongoDB.\r\n\r\n## 1.2. Key Concepts\r\n\r\n### 1.2.1. Topics\r\n\r\nEach Notification in the system will be about a Topic.\r\nA Topic can be seen a pure String that tells what the Notification is about.\r\n\r\nFor example, a notification can be about Football, Java Programming, Hip-Hop...\r\n\r\nWhat's interesting is that Topics can be organized into a hierarchical structure : \r\n- Sports \r\n- Sports.Football\r\n- Sports.BasketBall\r\n- Sports.Football.France\r\n- Sports.Football.France.StEtienne\r\n- Sports.Football.France.Marseille\r\n- Sports.Football.France.ParisSG\r\n- Sports.Football.Spain\r\n- Sports.Football.UK\r\n\r\nThe idea behind that is that if a Notification is sent about the topic Sports.Football.France.StEtienne, all users who subscribed to Sports, Sports.Football, Sports.Football.France and Sports.Football.France.StEtienne will receive it.\r\nAt the opposite, users who subscribed to Sports.Football.Spain or Sports.Football.France.Marseille will not receive it.\r\n\r\n### 1.2.2. Raw Notifications\r\n\r\nWhen a notification is created, it does not hold any information about who will receive it.\r\nIt just holds :\r\n- its Topic\r\n- its Context\r\n\r\nWe explained what is a Topic in last chapter. The system will use the Topic of the Raw Notification to determine who needs to receive it.\r\n\r\nThe Context of a Raw Notification is just a Map, i.e. a list of pairs Key - Value.\r\n\r\nFor example :\r\n```JSON\r\n{\r\n'Subject' : 'Tevez is the new Juve striker' \r\n'Content' : 'Argentine player has signed a 4-years contract with the Italy last-year champion.'\r\n'Date'    : '01/06/2013'\r\n}\r\n```\r\ncould be the context of a Raw Notification with Topic Sports.Football.Italy.Juventus\r\n\r\nThe Context will be used for building the notification messages. \r\nA common usage can be to build a mail content by populating a template from this context.  \r\n\r\n### 1.2.3. Subscriptions\r\n\r\nA subscription is the way the Notification Engine models the fact that a recipient has subscribed to a Topic.\r\n\r\nFor example, let's say that :\r\n- supermec@mail.fr has subscribed to Sports.Football.France\r\n- greatguy@mail.uk has subscribed to Sports.Football.UK\r\n- tio@mail.es has subscribed to Sports.Football.Spain\r\n\r\n### 1.2.4. Decorated Notifications\r\n\r\nWhen the Notification Engine process Raw Notifications, for each Raw Notification it determines, depending on Subscriptions for its Topic, who are the recipients that need to receive it.\r\n\r\nThen, it creates Decorated Notifications, that are the association of :\r\n- a Raw Notification\r\n- a Recipient\r\n\r\nLet's imagine that there are a total of 1000 subscriptions for \r\n- Topic Sports.Football.Italy.Juventus \r\n- Sports.Football.Italy \r\n- Sports.Football\r\n- Sports\r\n\r\nThen, the Raw Notification about the arrival of Tevez in the Juventus will trigger the creation of 1000 Decorated Notifications, one for each recipient that has subscribed to one of these Topics.\r\n\r\n## 1.3. Notification Engine Components\r\n\r\n### 1.3.1. Selectors\r\n\r\nIn the Notification Engine, Selector components are responsible of :\r\n- for a given Topic : \r\n\t- retrieving not processed Raw Notifications\r\n\t- for each of retrieved Raw Notifications : \r\n\t\t- retrieving concerned Subscriptions \r\n\t\t- for each of retrieved Subscriptions :\r\n\t\t\t- creating a Decorated Notification linked to the Raw Notification and the Subscription recipient\r\n\t\t- marking it as processed\r\n\r\n### 1.3.2. Notificators\r\n\r\nIn the Notification Engine, Notificator components are responsible of :\r\n- for a given Topic : \r\n\t- retrieving not sent Decorated Notifications\r\n\t- for each of retrieved Decorated Notifications : \r\n\t\t- sending it\r\n\t\t- marking it as sent\r\n\r\n### 1.3.3. Channels\r\n\r\nChannels are the base items when configuring the Notification Engine.\r\n\r\nConfiguring the Notification Engine is actually defining the Channels that it will instantiate.\r\n\r\nA Channel is defined by :\r\n- its identifier\r\n- its Topic\r\n- its Selector\r\n- its Notificator\r\n\r\nFurthermore, the Notification Engine allows to set additionnal options, such as execution periods, mail templates, to complete configuration of components.\r\n\r\nWith no surprise, the configuration file of the Notification Engine will contain the definition of its Channels. \r\n\r\n# 2. Installing the Notification Engine\r\n\r\n## 2.1. JavaEE Web application\r\n\r\n### 2.1.1 JDK version\r\n\r\nThe Notification Engine is a classical JavaEE 6 web application.\r\n\r\nIt needs Java7.\r\n\r\n### 2.1.2 Maven as a build tool\r\n\r\nMaven 3 is used as the build tool.\r\n\r\nThe project is declared with type war.\r\n\r\n## 2.2. Application Server\r\n\r\nThe Notification Engine has been validated with Glassfish 3, but it should run on any JavaEE application Server, including Tomcat since it does not use EJB components.\r\n\r\nBefore building the war, just edit the localsettings.properties file under src/main/resources.\r\nSee section \"Local settings\" for details on how to set local settings.\r\n\r\nTo build the war just run :\r\n\r\n```\r\nmvn package -DskipTests\r\n```\r\n\r\nSee section \"Unit tests\" if you are reluctant with skipping tests.\r\n\r\nThen you will get the war in your target directory.\r\nYou will just have to deploy it classically into your application server.\r\n\r\n## 2.3. Notification Engine Database\r\n\r\nThe Notification Engine needs an internal persistance system, for storing Raw and Decorated Notifications.\r\n\r\nIt can also store Subscriptions in this persistance system.\r\n\r\nMongoDB has been choosen for this internal persistance.\r\n\r\nThe Notification Engine has been validated with MongoDB 2.4.4.\r\n\r\nBy default, the Notification Engine expects a MongoDB instance running on localhost, on port 27017.\r\nThis instance should contain a database named \"notificationengine\", with collections named \"rawnotifications\" and \"decoratednotifications\".\r\n\r\n# 3. Using the Notification Engine\r\n\r\n## 3.1. Local settings\r\n\r\nThe file localsettings.properties file (under src/main/resources) is where you must set your local installation settings.\r\n\r\n```\r\nconfig.directory=D:/temp/notificationengine/config\r\ntemplates.directory=D:/temp/notificationengine/templates\r\nsmtp.host=smtp.gmail.com\r\nsmtp.port=587\r\nsmtp.username=xxxxx\r\nsmtp.password=xxxxx\r\nsmtp.timeout=8500\r\nsmtp.starttls.enable=true\r\nsmtp.auth=true\r\nmail.from=xxxxx\r\nmail.subject=Notification Engine Mail\r\nmongo.replica.mode=false\r\nmongo.url=localhost:27017\r\nmongo.database=notificationengine\r\nadministrator.address=xxxxx\r\n```\r\n\r\n- config.directory is the directory that will contain the configuration file (named configuration.json) of the Notification Engine.\r\n\r\n- templates.directory is the directory that will contain the template files used by the Notificator components.\r\n\r\n- smtp.* are properties that define the smtp settings that the system will use for sending mails.\r\nAll these properties are self explaining.\r\n\r\n- mail.from is the default from address that will be set by the system for all sent emails.\r\n\r\n- mail.subject is the default subject that will be set by the system for all sent emails.\r\n\r\n- mongo.* are properties that define the mongoDb settings that the system will use for its internal persistance.\r\nNote that you can define here a replicaSet, you just have to set the mongo.replica.mode property to true, and the mongo.url property to a comma separated list of host:port (localhost:27017,localhost:28017:localhost:29017 for example).\r\n\r\n- administrator.address is the address where all emails will be sent if you choose the AdministratorSelector.\r\n\r\n## 3.2. Configuration\r\n\r\nAs explained before, for the Notification Engine, a Configuration is the definition of the Channels that the Engine will instantiate.\r\n\r\nThis definition must be done in a file named configuration.json in the configuration directory specified in the localsettings.properties file.\r\n\r\nYou can find multiple of configuration files in config directory.\r\n\r\nAs you can see, the configuration is done in JSON :\r\n\r\nExample 1\r\n```JSON\r\n{\r\n\"channels\" : [\r\n\t\t\t\t{\r\n\t\t\t\t  \"id\" : \"facturationChannel\",\r\n\t\t\t\t  \"topic\" : \"facturation\",\r\n\t\t\t\t  \"selectorType\" : \"customSelector\",\r\n\t\t\t\t  \"selectorClass\" : \"org.notificationengine.selector.AdministratorSelector\",\r\n\t\t\t\t  \"notificatorType\" : \"customNotificator\",\r\n\t\t\t\t  \"notificatorClass\" : \"org.notificationengine.notificator.LoggerNotificator\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  \"id\" : \"helpdeskChannel\",\r\n\t\t\t\t  \"topic\" : \"helpdesk\",\r\n\t\t\t\t  \"selectorType\" : \"customSelector\",\r\n\t\t\t\t  \"selectorClass\" : \"org.notificationengine.selector.AdministratorSelector\",\r\n\t\t\t\t  \"notificatorTaskPeriod\" : \"5000\",\r\n\t\t\t\t  \"selectorTaskPeriod\" : \"5000\",\r\n\t\t\t\t  \"notificatorType\" : \"customNotificator\",\r\n\t\t\t\t  \"notificatorClass\" : \"org.notificationengine.notificator.LoggerNotificator\"\r\n\t\t\t\t}\r\n\t\t\t ]\r\n}\r\n```\r\n\r\nExample 2\r\n```JSON\r\n{\r\n\"channels\" : [\r\n\t\t\t\t{\r\n\t\t\t\t  \"id\" : \"facturationChannel\",\r\n\t\t\t\t  \"topic\" : \"facturation\",\r\n\t\t\t\t  \"selectorType\" : \"mongoDbSelector\",\r\n\t\t\t\t  \"notificatorType\" : \"multipleMailByRecipient\",\r\n\t\t\t\t  \"mailTemplate\" : \"facturationMailTemplate\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  \"id\" : \"helpdeskChannel\",\r\n\t\t\t\t  \"topic\" : \"helpdesk\",\r\n\t\t\t\t  \"selectorType\" : \"mongoDbSelector\",\r\n\t\t\t\t  \"notificatorType\" : \"singleMailByRecipient\",\r\n\t\t\t\t  \"mailTemplate\" : \"helpdeskMailTemplate\"\r\n\t\t\t\t}\r\n\t\t\t ]\r\n}\r\n```\r\n\r\nExample 3\r\n```JSON\r\n{\r\n\"channels\" : [\r\n\t\t\t\t{\r\n\t\t\t\t  \"id\" : \"facturationChannel\",\r\n\t\t\t\t  \"topic\" : \"facturation\",\r\n\t\t\t\t  \"selectorType\" : \"mongoDbSelector\",\r\n\t\t\t\t  \"notificatorType\" : \"singleMultiTopicMailByRecipient\",\r\n\t\t\t\t  \"mailTemplate\" : \"commonMailTemplate\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  \"id\" : \"helpdeskChannel\",\r\n\t\t\t\t  \"topic\" : \"helpdesk\",\r\n\t\t\t\t  \"selectorType\" : \"mongoDbSelector\",\r\n\t\t\t\t  \"selectorTaskPeriod\" : \"5000\",\r\n\t\t\t\t  \"notificatorType\" : \"singleMultiTopicMailByRecipient\",\r\n\t\t\t\t  \"notificatorTaskPeriod\" : \"5000\",\r\n\t\t\t\t  \"mailTemplate\" : \"commonMailTemplate\"\r\n\t\t\t\t}\r\n\t\t\t ]\r\n}\r\n```\r\n\r\nAs you can see, a Configuration is an array of Channels.\r\n\r\nEach Channel has :\r\n- an identifier\r\n- a Topic\r\n- a Selector\r\n  - the Selector can be of a known type, or of a custom type - in this case the Configuration must specify its full name class\r\n  - the Selector can have a specific execution period, expressed in ms with property selectorTaskPeriod (if it has not, if will be a 20s default period)\r\n- a Notificator\r\n  - the Notificator can be of a known type, or of a custom type - in this case the Configuration must specify its full name class\r\n  - the Notificator can have a specific execution period, expressed in ms with property notificatorTaskPeriod (if it has not, if will be a 20s default period)\r\n- any other needed options (just like mailTemplate in our examples) that will be accessible through a map at runtime\r\n\r\n### 3.2.1. Built-in Selectors\r\n\r\nAll selectors implement the ISelector interface, that just declares a process method.\r\n\r\n```JAVA\r\npublic interface ISelector {\r\n\r\n\tpublic void process();\r\n}\r\n```\r\n\r\nA base class implementation Selector has been provided that does all the boilerplate code, and leaves the retrieveSubscriptionsForTopic method abstract.\r\n\r\nBoilerplate code consists in :\r\n- for a given Topic : \r\n\t- retrieving not processed Raw Notifications\r\n\t- for each of retrieved Raw Notifications : \r\n\t\t- retrieving concerned Subscriptions (left abstract)\r\n\t\t- for each of retrieved Subscriptions :\r\n\t\t\t- creating a Decorated Notification linked to the Raw Notification and the Subscription recipient\r\n\t\t- marking it as processed\r\n\r\n```JAVA\r\npublic abstract class Selector implements ISelector {\r\n\r\n\t// Not shown : boilerplate code\r\n\r\n\tabstract protected Collection<Subscription> retrieveSubscriptionsForTopic(Topic topic);\r\n}\r\n```\r\n\r\nAll concrete implementations of Selector will provide a specific way for retrieving Subscriptions for a given Topic.\r\n\r\n#### 3.2.1.1 AdministratorSelector\r\n\r\nThis is the most simple Selector : for any Topic it retrieves just one Recipient, the Administrator email set in localsettings.properties.\r\n\r\nTo register this selector in a Channel, here is an example :\r\n\r\n```JSON\r\n{\r\n\"channels\" : [\r\n\t\t\t\t{\r\n\t\t\t\t  \"id\" : \"facturationChannel\",\r\n\t\t\t\t  \"topic\" : \"facturation\",\r\n\t\t\t\t  \"selectorType\" : \"customSelector\",\r\n\t\t\t\t  \"selectorClass\" : \"org.notificationengine.selector.AdministratorSelector\",\r\n\t\t\t\t  \"notificatorType\" : \"customNotificator\",\r\n\t\t\t\t  \"notificatorClass\" : \"org.notificationengine.notificator.LoggerNotificator\"\r\n\t\t\t\t}\r\n\t\t\t ]\r\n}\r\n```\r\n\r\n#### 3.2.1.2 MongoDbSelector\r\n\r\nThis is a more advanced Selector. It retrieves Subscriptions in the MongoDB database used by the Notification Engine for internal persistance.\r\n\r\nIt looks for Subscriptions in a collection named subscriptions, and with this format.\r\n\r\n```JSON\r\n{\r\n  \"_id\" : ObjectId(\"51f7c7e04531027fab736425\"),\r\n  \"topic\" : {\r\n    \"name\" : \"facturation.societe1\"\r\n  },\r\n  \"recipient\" : {\r\n    \"address\" : \"xxxx@zzzz.com\"\r\n  }\r\n}\r\n```\r\n\r\nOnce registered, this Selector also activates a controller that will allow to create Subscriptions by HTTP PUT requests :\r\n\r\nIf content\r\n\r\n```JSON\r\n{\r\n\"topic\" : \"facturation\",\r\n\"recipient\" : \"xxxx@yyyy.com\",\r\n\"displayName\": \"John Doe\"\r\n}\r\n```\r\n\r\nis sent to URL http://host:port/notificationengine/subscription.do with method PUT and header Content-Type set to application/json, then such subscription will be persisted.\r\n\r\nYou can retrieve this example in client directory.\r\n\r\nTo register this selector in a Channel, here is an example :\r\n\r\n```JSON\r\n{\r\n\"channels\" : [\r\n\t\t\t\t{\r\n\t\t\t\t  \"id\" : \"facturationChannel\",\r\n\t\t\t\t  \"topic\" : \"facturation\",\r\n\t\t\t\t  \"selectorType\" : \"mongoDbSelector\",\r\n\t\t\t\t  \"notificatorType\" : \"customNotificator\",\r\n\t\t\t\t  \"notificatorClass\" : \"org.notificationengine.notificator.LoggerNotificator\"\r\n\t\t\t\t}\r\n\t\t\t ]\r\n}\r\n```\r\n\r\n### 3.2.2. Built-in Notificators\r\n\r\nAll notificators implement the INotificator interface, that just declares a process method.\r\n\r\n```JAVA\r\npublic interface INotificator {\r\n\r\n\tpublic void process();\r\n}\r\n```\r\n\r\nA base class implementation Notificator has been provided that does all the boilerplate code, and leaves the processNotSentDecoratedNotifications method abstract.\r\n\r\nBoilerplate code consists in :\r\n- for a given Topic : \r\n\t- retrieving not sent Decorated Notifications\r\n\t- for each of retrieved Decorated Notifications : \r\n\t\t- sending it (left abstract)\r\n\t\t- marking it as sent\r\n\r\n```JAVA\r\npublic abstract class Notificator implements INotificator {\r\n\r\n\t// Not shown : boilerplate code\r\n\r\n\tprotected abstract void processNotSentDecoratedNotifications(\r\n\t\t\tCollection<DecoratedNotification> notSentDecoratedNotifications);\r\n}\r\n```\r\n\r\nAll concrete implementations of Notificator will provide a specific way for processing not sent Decorated Notifications.\r\n\r\n### 3.2.2.1 LoggerNotificator\r\n\r\nThis is the most simple Notificator : it just logs with a level INFO any Decorated Notification.\r\n\r\nTo register this notificator in a Channel, here is an example :\r\n\r\n```JSON\r\n{\r\n\"channels\" : [\r\n\t\t\t\t{\r\n\t\t\t\t  \"id\" : \"facturationChannel\",\r\n\t\t\t\t  \"topic\" : \"facturation\",\r\n\t\t\t\t  \"selectorType\" : \"customSelector\",\r\n\t\t\t\t  \"selectorClass\" : \"org.notificationengine.selector.AdministratorSelector\",\r\n\t\t\t\t  \"notificatorType\" : \"customNotificator\",\r\n\t\t\t\t  \"notificatorClass\" : \"org.notificationengine.notificator.LoggerNotificator\"\r\n\t\t\t\t}\r\n\t\t\t ]\r\n}\r\n```\r\n\r\n### 3.2.2.2 MultipleMailByRecipientNotificator\r\n\r\nThis is quite a simple Notificator : it just send an email for any Decorated Notification.\r\n\r\nTo register this notificator in a Channel, here is an example :\r\n\r\n```JSON\r\n{\r\n\"channels\" : [\r\n\t\t\t\t{\r\n\t\t\t\t  \"id\" : \"facturationChannel\",\r\n\t\t\t\t  \"topic\" : \"facturation\",\r\n\t\t\t\t  \"selectorType\" : \"customSelector\",\r\n\t\t\t\t  \"selectorClass\" : \"org.notificationengine.selector.AdministratorSelector\",\r\n\t\t\t\t  \"notificatorType\" : \"multipleMailByRecipient\",\r\n\t\t\t\t  \"mailTemplate\" : \"facturationMailTemplate\"\r\n\t\t\t\t}\r\n\t\t\t ]\r\n}\r\n```\r\n\r\nAs you can see, this notificator needs an option \"mailTemplate\".\r\nIn our example, the built-in Template Engine will look for a template file named facturationMailTemplate.template in the template directory specified in localsettings.properties.\r\n\r\nFor building the mail content, this notificator will merge this template with a Context containing :\r\n- all the entries of the Raw Notification Context\r\n- an additionnal entry named \"recipient\" containing the recipient address.\r\n\r\nThe template syntax is the one of Mustache framework.\r\n\r\nHere is an example of template for this notificator :\r\n```\r\nDear {{displayName}}\r\n\r\nThis mail has been sent by Facturation application.\r\n\r\n{{message}}\r\n\r\nBest regards,\r\n\r\nFacturation Team\r\n```\r\n\r\n### 3.2.2.3 SingleMailByRecipientNotificator\r\n\r\nThis is quite a more advanced Notificator : for a given topic, when it has found not sent Decorated Notifications, it will just send 1 mail by recipient, grouping the not sent Notifications.\r\n\r\nTo register this notificator in a Channel, here is an example :\r\n\r\n```JSON\r\n{\r\n\"channels\" : [\r\n\t\t\t\t{\r\n\t\t\t\t  \"id\" : \"facturationChannel\",\r\n\t\t\t\t  \"topic\" : \"helpdesk\",\r\n\t\t\t\t  \"selectorType\" : \"customSelector\",\r\n\t\t\t\t  \"selectorClass\" : \"org.notificationengine.selector.AdministratorSelector\",\r\n\t\t\t\t  \"notificatorType\" : \"singleMailByRecipient\",\r\n\t\t\t\t  \"mailTemplate\" : \"helpdeskMailTemplate\"\r\n\t\t\t\t}\r\n\t\t\t ]\r\n}\r\n```\r\n\r\nAs you can see, this notificator needs an option \"mailTemplate\".\r\nIn our example, the built-in Template Engine will look for a template file named helpdeskMailTemplate.template in the template directory specified in localsettings.properties.\r\n\r\nFor building the mail content, this notificator will merge this template with a Context containing :\r\n- an entry named \"notificationsByRecipient\" which is the list of the Contexts of the grouped RawNotifications\r\n- an additionnal entry named \"recipient\" containing the recipient address.\r\n\r\nThe template syntax is the one of Mustache framework.\r\n\r\nHere is an example of template for this notificator :\r\n```\r\nDear {{displayName}}\r\n\r\nThis mail has been sent by Helpdesk application.\r\n\r\nPlease take into account these actions from Helpdesk :\r\n\r\n{{#notificationsByRecipient}}\r\n> {{message}}\r\n{{/notificationsByRecipient}}\r\n\r\nBest regards,\r\n\r\nHelpdesk Team\r\n```\r\n\r\n### 3.2.2.4 SingleMultiTopicMailByRecipientNotificator\r\n\r\nThis is the most advanced Notificator : when it has found not sent Decorated Notifications, it will just send 1 mail by recipient, grouping the not sent Notifications of multiple Topics.\r\n\r\nTo register this notificator in a Channel, here is an example :\r\n\r\n```JSON\r\n{\r\n\"channels\" : [\r\n\t\t\t\t{\r\n\t\t\t\t  \"id\" : \"facturationChannel\",\r\n\t\t\t\t  \"topic\" : \"facturation\",\r\n\t\t\t\t  \"selectorType\" : \"mongoDbSelector\",\r\n\t\t\t\t  \"notificatorType\" : \"singleMultiTopicMailByRecipient\",\r\n\t\t\t\t  \"mailTemplate\" : \"commonMailTemplate\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  \"id\" : \"helpdeskChannel\",\r\n\t\t\t\t  \"topic\" : \"helpdesk\",\r\n\t\t\t\t  \"selectorType\" : \"mongoDbSelector\",\t\t\t\t  \r\n\t\t\t\t  \"selectorTaskPeriod\" : \"5000\",\r\n\t\t\t\t  \"notificatorType\" : \"singleMultiTopicMailByRecipient\",\r\n\t\t\t\t  \"notificatorTaskPeriod\" : \"5000\",\r\n\t\t\t\t  \"mailTemplate\" : \"commonMailTemplate\"\r\n\t\t\t\t}\r\n\t\t\t ]\r\n}\r\n```\r\n\r\nAs you can see, this notificator needs an option \"mailTemplate\".\r\nIn our example, the built-in Template Engine will look for a template file named commonMailTemplate.template in the template directory specified in localsettings.properties.\r\n\r\nFor building the mail content, this notificator will merge this template with a Context containing :\r\n- an entry named \"topics\" which is a list of Contexts containing :\r\n  - an entry \"topic\" with the name of the Topic\r\n  - an entry \"notificationsForTopic\" which is the list of the Contexts of the grouped RawNotifications of this Topic for this recipient\r\n- an additionnal entry named \"recipient\" containing the recipient address.\r\n\r\nThe template syntax is the one of Mustache framework.\r\n\r\nHere is an example of template for this notificator :\r\n```\r\nDear {{displayName}}\r\n\r\nThis mail has been sent by Notification application.\r\n\r\n{{#topics}}\r\n\r\n{{topic}}\r\n\r\n{{#notificationsForTopic}}\r\n\r\n> {{message}}\r\n\r\n{{/notificationsForTopic}}\r\n\r\n{{/topics}}\r\n\r\nBest regards,\r\n\r\nNotification Team\r\n```\r\n\r\n### 3.2.3. Built-in Components\r\n\r\n#### 3.2.3.1. Mailer\r\n\r\nThe system ships a Mailer for sending the emails.\r\n\r\nThe Mailer is based on Spring mail module.\r\n\r\nThe Mailer configuration is done in localsettings.properties :\r\n\r\n```\r\nsmtp.host=smtp.gmail.com\r\nsmtp.port=587\r\nsmtp.username=xxxxx\r\nsmtp.password=xxxxx\r\nsmtp.timeout=8500\r\nsmtp.starttls.enable=true\r\nsmtp.auth=true\r\n```\r\n\r\nIf you need the Mailer in a custom notificator, you can get it in Spring context.\r\nWe provide a SpingUtils utility class for getting beans.\r\n\r\nHere is the way of getting the Mailer :\r\n\r\n```JAVA\r\nMailer mailer = (Mailer)SpringUtils.getBean(Constants.MAILER);\r\n```\r\n\r\nThen you just have to ask the mailer to send a content to a given address with its method sendMail :\r\n\r\n```JAVA\r\n// sent a mail to the recipient\r\nmailer.sendMail(decoratedNotification.getRecipient().getAddress(), notificationText);\r\n```\r\n\r\n#### 3.2.3.2. Template Engine\r\n\r\nThe system ships a Template Engine for building the email content.\r\n\r\nThe Template Engine is based on Mustache, and all templates must follow Mustache syntax.\r\n\r\nThe Template Engine looks for templates files in the template directory specified in localsettings.properties.\r\nIt looks for files named with the value of option \"mailTemplate\" of the configuration, with the extension \".template\".\r\n\r\nIf you need the Template Engine in a custom notificator, you can get it in Spring context.\r\nWe provide a SpingUtils utility class for getting beans.\r\n\r\nHere is the way of getting the Template Engine :\r\n\r\n```JAVA\r\nTemplateEngine templateEngine = (TemplateEngine)SpringUtils.getBean(Constants.TEMPLATE_ENGINE); \r\n```\r\n\r\n## 3.3. Raw Notifications Push API\r\n\r\nTo enable creation of Raw Notifications, the Notification Engine proposes a REST API.\r\n\r\nIf content\r\n\r\n```JSON\r\n{\r\n\"topic\" : \"facturation.societe1\",\r\n\"context\" : {\r\n\t\t\t  \"salutation\" : \"Hola chicos\",\r\n\t\t\t  \"message\" : \"Hay que pagar ahora\"\r\n\t\t\t}\r\n}\r\n```\r\n\r\nis sent to URL http://host:port/notificationengine/rawNotification.do with method PUT and header Content-Type set to application/json, then a Raw Notification with such Topic and Context will be persisted.\r\n\r\nIt will be in the MongoDB database, in rawnotifications collection, with that format :\r\n\r\n```JSON\r\n{\r\n  \"_id\" : ObjectId(\"51f7c7e04531027fab736421\"),\r\n  \"processed\" : false,\r\n  \"topic\" : {\r\n    \"name\" : \"facturation.societe1\"\r\n  },\r\n  \"context\" : {\r\n    \"salutation\" : \"Hola chicos\",\r\n    \"message\" : \"Hay que pagar ahora.\"\r\n  }\r\n}\r\n```\r\n\r\nYou can retrieve this example in client directory.\r\n\r\n## 3.4. Metrics available\r\n\r\nSome metrics are available through a REST API. These can be used for a front-end that summarize the activity of the NotificationEngine. \r\n\r\n### 3.4.1. Subscription metrics\r\n\r\nIt is possible to get two different metrics for subscriptions : \r\n- get count of all subscriptions with the url ```countAllSubscriptions.do```\r\n- get count of all subscriptions for a topic with the url ```countAllSubscriptionsForTopic.do?topic=topicName```\r\n\r\nThe response would look like this in the first case : \r\n```JSON\r\n{\r\n\t\"count\": 6\r\n}\r\n```\r\n\r\nAnd like this in the second case : \r\n```JSON\r\n{\r\n\t\"count\": 3,\r\n\t\"topic\": {\r\n\t\t\"name\": \"topicName\"\r\n\t}\r\n}\r\n```\r\n\r\n### 3.4.2. RawNotification metrics\r\n\r\nThe NotificationEngine allows to get 6 different metrics for raw notifications : \r\n- get count of all raw notifications created with the url ```countAllRawNotifications.do```. It responds the following JSON : \r\n```JSON\r\n{\r\n\t\"count\": 42\r\n}\r\n```\r\n\r\n- get count of all raw notifications for a specific topic (```countRawNotificationsForTopic.do?topic=topicName```) that responds : \r\n```JSON\r\n{\r\n\t\"count\": 3,\r\n\t\"topic\": {\r\n\t\t\"name\": \"topicName\"\r\n\t}\r\n}\r\n```\r\n\r\n- get count of all raw notifications not processed (```countNotProcessedRawNotifications.do```). It gives this JSON : \r\n```JSON\r\n{\r\n\t\"count\": 42\r\n}\r\n```\r\n\r\n- get count of all not processed raw notifications for a topic (```countNotProcessedRawNotificationsForTopic.do?topic=topicName```). As a response, one gets : \r\n```JSON\r\n{\r\n\t\"count\": 3,\r\n\t\"topic\": {\r\n\t\t\"name\": \"topicName\"\r\n\t}\r\n}\r\n```\r\n\r\n- get count of all raw notifications created for last x days (```countCreatedRawNotificationsForLastDays.do?days=5```). The response is like : \r\n```JSON\r\n{\"2013-08-06\":3,\"2013-08-04\":10,\"2013-08-05\":6,\"2013-08-02\":12,\"2013-08-03\":5}\r\n```\r\nwhere ```\"2013-08-06\"```is a date at the format ```yyyy-MM-dd```\r\n\r\n- get count of all processed raw notifications created for last x days (```countProcessedRawNotificationsForLastDays.do?days=5```). The response is like : \r\n```JSON\r\n{\"2013-08-06\":2,\"2013-08-04\":8,\"2013-08-05\":10,\"2013-08-02\":12,\"2013-08-03\":3}\r\n```\r\nwhere ```\"2013-08-06\"```is a date at the format ```yyyy-MM-dd```\r\n\r\n\r\n### 3.4.3. DecoratedNotification metrics\r\n\r\nYou can get 6 different metrics for Decorated notifications : \r\n- get count of all decorated notifications created with the url ```countAllDecoratedNotifications.do```. It responds the following JSON : \r\n```JSON\r\n{\r\n\t\"count\": 42\r\n}\r\n```\r\n\r\n- get count of all decorated notifications for a specific topic (```countAllDecoratedNotificationsForTopic.do?topic=topicName```) that responds : \r\n```JSON\r\n{\r\n\t\"count\": 3,\r\n\t\"topic\": {\r\n\t\t\"name\": \"topicName\"\r\n\t}\r\n}\r\n```\r\n\r\n- get count of not sent decorated notifications (```countNotSentDecoratedNotifications.do```). It gives this JSON : \r\n```JSON\r\n{\r\n\t\"count\": 42\r\n}\r\n```\r\n\r\n- get count of all not sent decorated notifications for a topic (```countNotSentDecoratedNotificationsForTopic.do?topic=topicName```). As a response, one gets : \r\n```JSON\r\n{\r\n\t\"count\": 3,\r\n\t\"topic\": {\r\n\t\t\"name\": \"topicName\"\r\n\t}\r\n}\r\n```\r\n\r\n- get count of all decorated notifications created for last x days (```countCreatedDecoratedNotificationsForLastDays.do?days=5```). The response is like : \r\n```JSON\r\n{\"2013-08-06\":3,\"2013-08-04\":10,\"2013-08-05\":6,\"2013-08-02\":12,\"2013-08-03\":5}\r\n```\r\nwhere ```\"2013-08-06\"```is a date at the format ```yyyy-MM-dd```\r\n\r\n- get count of all sent decorated notifications created for last x days (```countSentDecoratedNotificationsForLastDays.do?days=5```). The response is like : \r\n```JSON\r\n{\"2013-08-06\":2,\"2013-08-04\":8,\"2013-08-05\":10,\"2013-08-02\":12,\"2013-08-03\":3}\r\n```\r\nwhere ```\"2013-08-06\"```is a date at the format ```yyyy-MM-dd```\r\n\r\n# 4. Extending the Notification Engine\r\n\r\nThe Notification Engine provides some built-in Selectors and Notificators, but there are chances that you need to create new Selectors or Notificators to fit your needs.\r\n\r\nThere are 2 ways for doing this :\r\n\r\n- First option\r\n\t- get the code base\r\n\t- add your own components\r\n\t- build the war\r\n\t- deploy it\r\n\r\n- Second option\r\n\t- get the code base \r\n\t- install it in your maven repo\r\n\t- create a custom project where you add your own components\r\n\t- build the war of your custom project\r\n\t- deploy the war of your custom project\r\n\r\nIn both cases, you need to add your components to the configuration file.\r\n\r\n## 4.1. Configuring custom components\r\n\r\n### 4.1.1. Configuring custom selectors\r\n\r\nIf you look at the configuration of the AdministratorSelector, you can already see how to configure a custom Selector :\r\n\r\n```JSON\r\n{\r\n\"channels\" : [\r\n\t\t\t\t{\r\n\t\t\t\t  \"id\" : \"facturationChannel\",\r\n\t\t\t\t  \"topic\" : \"facturation\",\r\n\t\t\t\t  \"selectorType\" : \"customSelector\",\r\n\t\t\t\t  \"selectorClass\" : \"org.notificationengine.selector.AdministratorSelector\",\r\n\t\t\t\t  \"notificatorType\" : \"customNotificator\",\r\n\t\t\t\t  \"notificatorClass\" : \"org.notificationengine.notificator.LoggerNotificator\"\r\n\t\t\t\t}\r\n\t\t\t ]\r\n}\r\n```\r\n\r\nAs you can see, you declare the selectorType as \"customSelector\", and provide the full name of the selector class in the selectorClass field.\r\n\r\nThe NotificationEngine will then instantiate your selector, using a 2 parameters constructor :\r\n- one for the Topic\r\n- one for the map of options (provided in the configuration file)\r\n\r\nHere is the example with the code of the AdministratorSelector :\r\n\r\n```JAVA\r\npublic class AdministratorSelector extends Selector {\r\n\r\n\tpublic AdministratorSelector(Topic topic, Map<String, String> options) {\r\n\t\tsuper(topic, options);\r\n\t}\r\n\t\r\n\t@Override\r\n\tprotected Collection<Subscription> retrieveSubscriptionsForTopic(Topic topic) {\r\n\t\t// not shown...\r\n\t}\r\n}\r\n```\r\n\r\nJust do the same with your own custom selectors.\r\n\r\n### 4.1.2. Configuring custom notificators\r\n\r\nIf you look at the configuration of the LoggerNotificator, you can already see how to configure a custom Notificator :\r\n\r\n```JSON\r\n{\r\n\"channels\" : [\r\n\t\t\t\t{\r\n\t\t\t\t  \"id\" : \"facturationChannel\",\r\n\t\t\t\t  \"topic\" : \"facturation\",\r\n\t\t\t\t  \"selectorType\" : \"customSelector\",\r\n\t\t\t\t  \"selectorClass\" : \"org.notificationengine.selector.AdministratorSelector\",\r\n\t\t\t\t  \"notificatorType\" : \"customNotificator\",\r\n\t\t\t\t  \"notificatorClass\" : \"org.notificationengine.notificator.LoggerNotificator\"\r\n\t\t\t\t}\r\n\t\t\t ]\r\n}\r\n```\r\n\r\nAs you can see, you declare the notificatorType as \"customNotificator\", and provide the full name of the notificator class in the notificatorClass field.\r\n\r\nThe NotificationEngine will then instantiate your notificator, using a 2 parameters constructor :\r\n- one for the Topic\r\n- one for the map of options (provided in the configuration file)\r\n\r\nHere is the example with the code of the LoggerNotificator :\r\n\r\n```JAVA\r\npublic class LoggerNotificator extends Notificator {\r\n\r\n\tpublic LoggerNotificator(Topic topic, Map<String, String> options) {\r\n\t\tsuper(topic, options);\r\n\t}\r\n\r\n\t@Override\r\n\tprotected void processNotSentDecoratedNotifications(\r\n\t\t\tCollection<DecoratedNotification> notSentDecoratedNotifications) {\r\n\t\t// not shown...\r\n\t}\r\n\r\n}\r\n```\r\n\r\nJust do the same with your own custom notificators.\r\n\r\n## 4.2. Creating a custom project\r\n\r\n### 4.2.1. Purpose and principles\r\n\r\nIt is possible to extend the Notification Engine without altering the code base.\r\n\r\nAll you need is creating a new Maven project declaring in its pom.xml :\r\n\r\n- the Notification Engine \"core\" as a war dependency (for applying the war overlay technique provided by maven war plugin)\r\n\r\n- the Notification Engine \"core\" as a classic dependency (with \"classes\" classifier for the code to compile)\r\n\r\nThis is illustrated by this extract of the pom.xml of the custom project JDBC selector provided under custom/jdbcselector directory :\r\n```\r\n<dependency>\r\n  <groupId>org.notificationengine</groupId>\r\n  <artifactId>notificationengine</artifactId>\r\n  <version>0.0.1-SNAPSHOT</version>\r\n  <type>war</type>\r\n</dependency> \r\n\r\n<dependency>\r\n  <groupId>org.notificationengine</groupId>\r\n  <artifactId>notificationengine</artifactId>\r\n  <version>0.0.1-SNAPSHOT</version>\r\n  <classifier>classes</classifier>\r\n</dependency>\r\n```\r\n\r\n### 4.2.2. Example of the JDBC Selector\r\n\r\nWe applied this option for creating a custom project that extends the Notification Engine by providing a JDBC based Selector.\r\n\r\nYou can see in last chapter an except of the pom.xml file of this custom project.\r\n\r\nThe JDBC selector can be configurated in its localsettingsJdbcSelector.properties file (under src/main/resources) :\r\n\r\n```\r\njdbc.driverClassName=org.hsqldb.jdbc.JDBCDriver\r\njdbc.url=jdbc:hsqldb:hsql://localhost/subscriptions\r\njdbc.username=SA\r\njdbc.password=\r\njdbc.sql.order=SELECT u.EMAIL FROM USER u, SUBSCRIPTION s, TOPIC t WHERE u.ID = s.USER_ID AND t.ID = s.TOPIC_ID AND t.LABEL = :topic\r\njdbc.sql.recipient.alias=EMAIL\r\njdbc.sql.topic.param=topic\r\n``` \r\n\r\nProperties \"jdbc.driverClassName\", \"jdbc.url\", \"jdbc.username\", \"jdbc.password\" are self-explaining.\r\n\r\nProperty \"jdbc.sql.order\" is the SQL order that will be executed by the selector to get the Subscriptions for a given Topic.\r\n\r\nProperty \"jdbc.sql.recipient.alias\" is the name of the alias for the column containing the address of the recipient concerned by the Subscription.\r\n\r\nProperty \"jdbc.sql.topic.param=topic\" is the name of the parameter used for substituting the Topic at runtime.\r\n\r\nNote that if you use a database different than hsqldb, you will have to add the dependency in the pom.xml. \r\n\r\n## 4.3. Unit tests\r\n\r\nWe tried to add some unit tests to our Notification Engine.\r\nSome of them need a MongoDB instance running on localhost, on port 27017.\r\nThis instance should contain a database named notificationengine_test, with collections rawnotifications, decoratednotifications and subscriptions.\r\nThis is not very \"state of the art\", please be indulgent :)\r\n\r\n# 5. Roadmap\r\n\r\nWe use the issues of GitHub to define the new features we plan to implement.\r\n\r\nWe also use it to list the bugs we find.\r\n\r\nFeel free to contribute, and we would really welcome any of your suggestions for improving the Notification Engine.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}